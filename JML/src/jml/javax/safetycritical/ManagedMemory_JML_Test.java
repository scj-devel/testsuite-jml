/*
 * Test Oracle Class for jml.javax.safetycritical.ManagedMemory
 * For Use With JML4 RAC
 *
 * Generated by JMLUnitNG 1.3 (103), 2013-06-16 14:44 +0200.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

package jml.javax.safetycritical;


import java.io.PrintWriter;
import java.util.ArrayList;

import org.jmlspecs.jmlunitng.iterator.IteratorWrapper;
import org.jmlspecs.jmlunitng.iterator.ParameterArrayIterator;
import org.jmlspecs.jmlunitng.testng.BasicTestListener;
import org.jmlspecs.jmlunitng.testng.PreconditionSkipException;
import org.testng.Assert;
import org.testng.TestException;
import org.testng.TestNG;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.xml.XmlSuite;

import org.jmlspecs.jml4.rac.runtime.JMLAssertionError;
import org.jmlspecs.jml4.rac.runtime.JMLChecker;
import org.jmlspecs.jml4.rac.runtime.JMLEntryPreconditionError;
import org.jmlspecs.jml4.rac.runtime.JMLEvaluationError;

import jml.javax.safetycritical.ManagedMemory_JML_Data.*;


/**
 * Test oracles generated by JMLUnitNG for JML4 RAC of class
 * jml.javax.safetycritical.ManagedMemory.
 * 
 * @author JMLUnitNG 1.3 (103)
 * @version 2013-06-16 14:44 +0200
 */

public class ManagedMemory_JML_Test {
  /**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
  public static void main(String[] the_args) {
    final TestNG testng_runner = new TestNG();
    final Class<?>[] classes = {ManagedMemory_JML_Test.class};
    final BasicTestListener listener =
      new BasicTestListener(new PrintWriter(System.out));
    testng_runner.setUseDefaultListeners(false);
    testng_runner.setXmlSuites(new ArrayList<XmlSuite>());
    testng_runner.setTestClasses(classes);
    testng_runner.addListener(listener);
    testng_runner.run();
  }

  /** 
   * A test to ensure that RAC is enabled before running other tests.
   */
  @Test
  public void test_racEnabled() {
    Assert.assertTrue
    (JMLChecker.isRACCompiled(jml.javax.safetycritical.ManagedMemory.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");
  } 

  /**
   * A test for method enterPrivateMemory.
   *
   * @param the_test_object The ManagedMemory to call the test method on.
   * @param size The int to be passed.
   * @param logic The Runnable to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_enterPrivateMemory__int_size__Runnable_logic__10")
  public void test_static_enterPrivateMemory__int_size__Runnable_logic__10
  ( final int size, final java.lang.Runnable logic) {
    try {
      jml.javax.safetycritical.ManagedMemory.enterPrivateMemory(size, logic);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method executeInAreaOf.
   *
   * @param the_test_object The ManagedMemory to call the test method on.
   * @param obj The Object to be passed.
   * @param logic The Runnable to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_executeInAreaOf__Object_obj__Runnable_logic__20")
  public void test_static_executeInAreaOf__Object_obj__Runnable_logic__20
  ( final java.lang.Object obj, final java.lang.Runnable logic) {
    try {
      jml.javax.safetycritical.ManagedMemory.executeInAreaOf(obj, logic);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * A test for method executeInOuterArea.
   *
   * @param the_test_object The ManagedMemory to call the test method on.
   * @param logic The Runnable to be passed.
   */
  @Test(dependsOnMethods = { "test_racEnabled" }, 
        dataProvider = "p_executeInOuterArea__Runnable_logic__10")
  public void test_static_executeInOuterArea__Runnable_logic__10
  ( final java.lang.Runnable logic) {
    try {
      jml.javax.safetycritical.ManagedMemory.executeInOuterArea(logic);
    }
    catch (final JMLEntryPreconditionError $e) {
      // meaningless test
      throw new PreconditionSkipException($e.getMessage());
    }
    catch (final JMLEvaluationError $e) {
      if ($e.getCause() instanceof JMLEntryPreconditionError) {
        // meaningless test
        throw new PreconditionSkipException($e.getCause().getMessage());
      } else {
        // failed test
        throw new TestException($e.getCause().getMessage());
      }
    }
    catch (final JMLAssertionError $e) {
      // test failure
      throw new TestException($e.getMessage());
    }
    catch (final Throwable $e) {
      // test failure for some reason other than assertion violation
      throw new TestException($e.getMessage());
    }
  }

  /**
   * Data provider for method void enterPrivateMemory(int, Runnable).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_enterPrivateMemory__int_size__Runnable_logic__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_enterPrivateMemory__int_size__Runnable_logic__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (enterPrivateMemory__int_size__Runnable_logic__10__size.class,
          enterPrivateMemory__int_size__Runnable_logic__10__logic.class));
  }


  /**
   * Data provider for method void executeInAreaOf(Object, Runnable).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_executeInAreaOf__Object_obj__Runnable_logic__20", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_executeInAreaOf__Object_obj__Runnable_logic__20() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (executeInAreaOf__Object_obj__Runnable_logic__20__obj.class,
          executeInAreaOf__Object_obj__Runnable_logic__20__logic.class));
  }


  /**
   * Data provider for method void executeInOuterArea(Runnable).
   * @return An iterator over strategies to use for parameter generation.
   */
  @SuppressWarnings({"unchecked"})
  @DataProvider(name = "p_executeInOuterArea__Runnable_logic__10", 
                parallel = false)
  public static IteratorWrapper<Object[]> p_executeInOuterArea__Runnable_logic__10() {
    return new IteratorWrapper<Object[]>
    (new ParameterArrayIterator
         (executeInOuterArea__Runnable_logic__10__logic.class));
  }


}