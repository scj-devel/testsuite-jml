/*
 * Test data strategy for jml.javax.safetycritical.MemoryArea.
 *
 * Generated by JMLUnitNG 1.3 (103), 2013-06-16 04:48 +0200.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

 
package jml.javax.safetycritical.MemoryArea_JML_Data;

import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;

/**
 * Test data strategy for jml.javax.safetycritical.MemoryArea. Provides
 * test values for parameter "Object object" 
 * of method "jml.javax.safetycritical.MemoryArea[] getContexts(Object)". 
 * 
 * @author JMLUnitNG 1.3 (103)
 * @version 2013-06-16 04:48 +0200
 */
public class getContexts__Object_object__10__object
  extends ClassStrategy_java_lang_Object {
  /**
   * @return local-scope values for parameter 
   *  "Object object".
   */
  public RepeatedAccessIterator<?> localValues() {
  	return new ObjectArrayIterator<Object>
  	(new Object[]
  	 { /* add local-scope java.lang.Object values or generators here */ });
  }

  /**
   * Constructor.
   * The use of reflection can be controlled here for  
   * "Object object" of method "jml.javax.safetycritical.MemoryArea[] getContexts(Object)" 
   * by changing the parameters to <code>setReflective</code>
   * and <code>setMaxRecursionDepth<code>.
   * In addition, the data generators used can be changed by adding 
   * additional data class lines, or by removing some of the automatically 
   * generated ones. Since this is the lowest level of strategy, the 
   * behavior will be exactly as you specify here if you clear the existing 
   * list of classes first.
   *
   * @see NonPrimitiveStrategy#addDataClass(Class<?>)
   * @see NonPrimitiveStrategy#clearDataClasses()
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
  public getContexts__Object_object__10__object() {
    super();
    // uncomment to control the maximum reflective instantiation
    // recursion depth, 0 by default
    // setMaxRecursionDepth(0);
  }
}
