/*
 * Test data strategy for package jml.vm.
 *
 * Generated by JMLUnitNG 1.3 (103), 2013-04-06 17:35 +0200.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

 package jml.vm;

import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
import org.jmlspecs.jmlunitng.strategy.ObjectStrategy;

/**
 * Test data strategy for package jml.vm. Provides
 * package-scope test values for type jml.vm.Memory.
 * 
 * @author JMLUnitNG 1.3 (103)
 * @version 2013-04-06 17:35 +0200
 */
public class PackageStrategy_jml_vm_Memory 
  extends ObjectStrategy {
  /**
   * @return package-scope values for type jml.vm.Memory.
   */
  public RepeatedAccessIterator<?> packageValues() {
    return new ObjectArrayIterator<Object>
    (new Object[] 
     { /* add package-scope jml.vm.Memory values or generators here */ });
  }
  
  /**
   * defaultValues() from Memory; overridden by HSO
   * @return default values for type Memory.
   */
  public RepeatedAccessIterator<?> defaultValues() {
    return new ObjectArrayIterator<Object>
    (new Object[] 
     { /* add default HighResolutionTime values or generators here */ 
        new Memory (0,1000)
     });
  }

  /**
   * Constructor. 
   * The use of reflection can be controlled here for method 
   * parameters of type jml.vm.Memory
   * in this package by changing the parameters to <code>setReflective</code>
   * and <code>setMaxRecursionDepth<code>.
   * In addition, the data generators used can be changed by adding 
   * additional data class lines, or by removing some of the automatically 
   * generated ones. Note that lower-level strategies can override any 
   * behavior specified here by calling the same control methods in 
   * their own constructors.
   *
   * @see NonPrimitiveStrategy#addDataClass(Class<?>)
   * @see NonPrimitiveStrategy#clearDataClasses()
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
  public PackageStrategy_jml_vm_Memory() {
    super(jml.vm.Memory.class);
    setReflective(false);
    // uncomment to control the maximum reflective instantiation
    // recursion depth, 0 by default
    // setMaxRecursionDepth(0);
  }
}
